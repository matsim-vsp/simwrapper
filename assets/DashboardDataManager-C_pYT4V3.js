import{g as C}from"./index-BSRT1qCd.js";import{H as y,g as P,p as L,f as S}from"./HTTPFileSystem-CM0ZTrcf.js";import{r as R}from"./group-DobYzF2-.js";function b(u){return new Worker("/simwrapper/assets/DataFetcher.worker-DZLzOzSZ.js",{name:u?.name})}function $(u){return new Worker("/simwrapper/assets/RoadNetworkLoader.worker-cXsXt2tK.js",{name:u?.name})}const A=avro;function E(u){return new Worker("/simwrapper/assets/WasmXmlNetworkParser.worker-WeoIPmDR.js",{name:u?.name})}const D=!!window.showDirectoryPicker,O=!D;class M{constructor(...e){this.root=e.length?e[0]:"",this.subfolder=e.length?e[1]:"",this.fileApi=this._getFileSystem(this.root)}threads=[];subfolder="";root="";fileApi;networks={};featureCollections={};kill(){for(const e of this.threads)e.terminate();this.threads=[]}getFilteredDataset(e){return e.dataset in this.datasets?{filteredRows:this.datasets[e.dataset].filteredRows}:{filteredRows:null}}async OLDgetFiltered(e){const s=this.datasets[e.dataset].filteredRows;if(!s)return{filteredRows:null};let t={};if(e.value&&e.groupBy){const l=e.value,d=e.groupBy;t=R(s,i=>i.reduce((a,r)=>a+r[l],0),i=>i[d])}const n=Array.from(t.keys()),o=Array.from(t.values());return{filteredRows:{x:n,y:o}}}async getDataset(e,s){try{const t=`${s?.subfolder||this.subfolder}/${e.dataset}`;this.datasets[t]||(console.log("LOAD:",t),this.datasets[t]={dataset:this._fetchDataset(e,s),activeFilters:{},filteredRows:null,filterListeners:new Set});let o=await((a,r)=>{const f=new Promise((c,h)=>{setTimeout(()=>{h(new Error(`Operation timed out after ${r}s`))},r*1e3)});return Promise.race([a,f])})(this.datasets[t].dataset,60),{_comments:l,...d}=o,i=l;return e.ignoreColumns&&e.ignoreColumns.forEach(a=>{delete d[a]}),e.useLastRow&&Object.keys(d).forEach(a=>{const r=o[a].values;d[a]=r[r.length-1]}),{allRows:d,comments:i}}catch(t){const n=(""+t).replaceAll("Error: ","");throw console.error(n),Error(n)}}setRowWisePropertyTable(e,s,t){const n=e.substring(e.lastIndexOf("/")+1);let o={dataset:n};return typeof t!="string"&&(o=Object.assign(o,t)),this.datasets[n]={activeFilters:{},filteredRows:null,filterListeners:new Set,dataset:new Promise(l=>{l(s)})},this.datasets[n].dataset}getFeatureCollection(e){return this.featureCollections[e]}async registerFeatures(e,s,t){this.featureCollections[e]=s;const n=s.map(o=>o.properties||{});await this.setFeatureProperties(e,n,t),s.forEach(o=>{o.properties={}})}setFeatureProperties(e,s,t){const n=e.substring(e.lastIndexOf("/")+1),o=`${t?.subfolder||""}/${n}`;let l={dataset:o};return typeof t!="string"&&(l=Object.assign(l,t)),this.datasets[o]={activeFilters:{},filteredRows:null,filterListeners:new Set,dataset:new Promise((d,i)=>{const a=new b;try{a.onmessage=r=>{if(r.data.ready){this.threads.push(a),a.postMessage({config:l,featureProperties:s});return}a.terminate(),r.data.error&&(console.error(r.data.error),i(`Problem loading properties in ${e}`)),d(r.data)}}catch(r){a.terminate(),console.error(r),i(r)}})},this.datasets[o].dataset}setPreloadedDataset(e){this.datasets[e.key]={dataset:new Promise((s,t)=>{s(e.dataTable)}),activeFilters:{},filteredRows:null,filterListeners:new Set}}async getRoadNetwork(e,s,t,n,o){const l=`/${s}/${e}`,d={};return t.projection&&(d.crs=t.projection),this.networks[l]||(this.networks[l]=this._fetchNetwork({subfolder:s,filename:e,cbStatus:n,options:d,extra:o})),await this.networks[l]}async setFilter(e){const{dataset:s,column:t,value:n,invert:o,range:l}=e;if(!this.datasets[s]){console.warn(`${s} doesn't exist yet`),console.warn(Object.keys(this.datasets));return}console.log("> setFilter",s,t,n);const d=Array.isArray(n)?n:[n];this.datasets[s].activeFilters==null&&(this.datasets[s].activeFilters={});const i=this.datasets[s].activeFilters;d.length?i[t]={values:d,invert:o,range:l}:delete i[t],await this._updateFilters(s)}addFilterListener(e,s){try{const t=`${e.subfolder||this.subfolder}/${e.dataset}`;if(!this.datasets[t])throw Error("Can't add listener, no dataset named: "+t);this.datasets[t].filterListeners.add(s)}catch(t){console.error("CANT ADD FILTER LISTENER"+t)}}removeFilterListener(e,s){const t=`${e.subfolder||this.subfolder}/${e.dataset}`;try{this.datasets[t].filterListeners&&this.datasets[t].filterListeners.delete(s)}catch{}}clearCache(){this.kill(),this.datasets={},this.networks={}}async _updateFilters(e){console.log("> updateFilters ",e);const s=this.datasets[e];if(console.log({metaData:s}),!Object.keys(s.activeFilters).length){console.log("no keys"),s.filteredRows=null,this._notifyListeners(e);return}const t=await s.dataset,n=Object.keys(t);let o=[];const l=t[n[0]].values.length,d=new Array(l).fill(!0),i=/^(<|>)/;for(const[a,r]of Object.entries(s.activeFilters)){const f=t[a];if(r.values[0]===void 0||r.values[0]==="")throw Error(e+": filter error");if(i.test(r.values[0]))r.values[0].startsWith("<=")?(r.conditional="<=",r.values[0]=r.values[0].substring(2).trim()):r.values[0].startsWith(">=")?(r.conditional=">=",r.values[0]=r.values[0].substring(2).trim()):r.values[0].startsWith("<")?(r.conditional="<",r.values[0]=r.values[0].substring(1).trim()):r.values[0].startsWith(">")&&(r.conditional=">",r.values[0]=r.values[0].substring(1).trim());else if(r.values.length===1&&typeof r.values[0]=="string"){const c=parseFloat(r.values[0]);Number.isFinite(c)&&r.values.push(c)}for(let c=0;c<l;c++)x(r,f.values[c])||(d[c]=!1)}for(let a=0;a<l;a++)if(d[a]){const r={};n.forEach(f=>r[f]=t[f].values[a]),o.push(r)}s.filteredRows=o,this._notifyListeners(e)}_notifyListeners(e){const s=this.datasets[e];for(const t of s.filterListeners)t(e)}async _fetchDataset(e,s){let t;try{const{files:o}=await new y(this.fileApi).getDirectory(s?.subfolder||this.subfolder);t=o}catch(o){throw console.error("FAIL! "+o),Error(""+o)}let n=t;return new Promise((o,l)=>{const d=new b;try{d.onmessage=i=>{if(i.data.ready){d.postMessage({fileSystemConfig:this.fileApi,subfolder:s?.subfolder||this.subfolder,files:n,config:e,options:s});return}if(d.terminate(),i.data.error){let a=""+(i.data?.error||"Error loading file");a=a.replace("[object Response]","Error loading file"),e?.dataset&&a.indexOf(e.dataset)===-1&&(a+=`: ${e.dataset}`),l(a)}o(i.data)}}catch(i){d.terminate(),console.error(i),l(i)}})}async _getAvroNetwork(e){try{const t=await new y(this.fileApi).getFileBlob(`${e.subfolder}/${e.filename}`),o=(await new Promise(async(a,r)=>{const f=[];A.createBlobDecoder(t).on("metadata",c=>{}).on("data",c=>{f.push(c)}).on("end",()=>{a(f)})}))[0],l=o.linkId.length,d=new Float32Array(2*l),i=new Float32Array(2*l);for(let a=0;a<l;a++){const r=2*o.from[a],f=2*o.to[a];d[2*a]=o.nodeCoordinates[r],d[2*a+1]=o.nodeCoordinates[1+r],i[2*a]=o.nodeCoordinates[f],i[2*a+1]=o.nodeCoordinates[1+f]}return o.source=d,o.dest=i,o}catch(s){return console.error(s),null}}async _getEPSGfromConfig(){try{const e=new y(this.fileApi),{files:s}=await e.getDirectory(this.subfolder),t=s.filter(n=>n.indexOf("config.xml")>-1||n.indexOf("config_reduced.xml")>-1);if(t.length)for(const n of t)try{const l=await(await e.getFileBlob(`${this.subfolder}/${n}`)).arrayBuffer(),d=await P(l),i=new TextDecoder().decode(d);return(await L(i)).config.module.filter(h=>h.$name==="global")[0].param.filter(h=>h.$name==="coordinateSystem")[0].$value}catch{console.warn("Failed parsing",n)}}catch(e){return console.error(""+e),""}}async _fetchNetwork(e){return new Promise(async(s,t)=>{const{subfolder:n,filename:o,cbStatus:l,options:d}=e,i=`/${n}/${o}`;console.log("load network:",i);let a=i.indexOf("/")>-1?i.substring(0,i.lastIndexOf("/")):this.subfolder;try{const{files:c}=await new y(this.fileApi).getDirectory(a);let h=i.indexOf("/")===-1?i:i.substring(i.lastIndexOf("/")+1);S(c,h).length!==1&&t("File not found: "+i)}catch{t("Error reading folder: "+a)}if(o.toLocaleLowerCase().endsWith(".avro")){const c=await this._getAvroNetwork(e);c||t("Problem loading network: "+i),s(c);return}const r=await this._getEPSGfromConfig();if(o.toLocaleLowerCase().endsWith(".xml")||o.toLocaleLowerCase().endsWith(".xml.gz"))try{const h=await new Promise((p,v)=>{const m=new E;m.onmessage=k=>{const w=k.data;if("requestCRS"in w){if(r&&r!=="Atlantis"){w.confirmedCRS=r,m.postMessage({confirmedCRS:r});return}const F=w.requestCRS?'"Atlantis" coordinates found. ':"";let g=prompt(`Enter EPSG projection code.

${F}Enter projection, e.g. EPSG:25832, or cancel to load without a base map.`)||"Atlantis";Number.isInteger(parseInt(g))&&(g=`EPSG:${g}`),m.postMessage({confirmedCRS:g});return}if(w.error&&v(w.error),w.status&&l){l(w.status);return}p(w.network)},m.postMessage({path:i,crs:d.crs||"",fsConfig:this.fileApi,options:d})});s(h)}catch(c){console.error(c),t(c)}finally{return}const f=new $;try{f.onmessage=c=>{if(c.data.promptUserForCRS){let h=prompt('Enter the projection coordinate reference system, e.g. "EPSG:25832", or cancel if unknown')||"Atlantis";Number.isInteger(parseInt(h))&&(h=`EPSG:${h}`),f.postMessage({crs:h});return}if(c.data.status){l&&l(c.data.status);return}f.terminate(),c.data.error&&(console.error(c.data.error),t(c.data.error)),s(c.data.links)},f.postMessage({filePath:i,fileSystem:this.fileApi,options:d,extraColumns:!!e.extra,isFirefox:O})}catch(c){f.terminate(),console.error(c),t(c)}})}_getFileSystem(e){const s=C.state.svnProjects.filter(t=>t.slug===e);if(s.length===0)throw console.error(`DDM: no such project, is slug correct? (${e})`),Error;return s[0]}datasets={}}function x(u,e){const s={"<":()=>e<u.values[0],"<=":()=>e<=u.values[0],">":()=>e>u.values[0],">=":()=>e>=u.values[0]};let t;return u.range?t=e>=u.values[0]&&e<=u.values[1]:u.conditional?t=s[u.conditional]():t=u.values.includes(e),u.invert?!t:t}export{M as D,$ as W,A as a,b,x as c};
